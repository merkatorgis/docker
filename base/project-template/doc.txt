1. Create a Docker Registry account for this application/project (needed for the
componets' pipelines when they push the images they build to the Docker registry
- if you don't have it right now, you can later configure the DOCKER_PASSWORD
variable manually via Pipelines | Library | Variable Groups).

2. Create a Personal Access Token (PAT) for DevOps (needed by the
project-template pipeline that will run once to create the different DevOps
objects _as a Project Administrator_):
- Create a PAT with scope "full access". See for instructions:
https://learn.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?toc=%2Fazure%2Fdevops%2Forganizations%2Ftoc.json&view=azure-devops&tabs=Windows

3. Create a new DevOps project (with the same account you created the PAT for).

4. Initialise the new project's default repo (since we need it as a container
for the project-template pipeline):
- Click Repos (center left).
- Click Initialize (bottom right).

5. Create and run the project-template pipeline:
    5.1 Create a new pipeline:
    - Click Pipelines (center left) | Create pipeline (center) | Azure Repos Git
        | {this project's default repo} | Starter pipeline

    5.2. Create the pipeline's variables (they'll be removed when the pipeline
    run completes):
    - Click Variables (top right) | New variable
        -> Name: PAT, Value: {the PAT you created}, tick Keep this value secret
    - Clik OK.
    - Click "+" (top right) to add another variable.
        -> Name: DOCKER_PASSWORD, Value: {your project's Docker registry
            password}, tick Keep this value secret
    - Click OK, then Save.

    5.3. Replace all of the starter pipeline code with exactly these five lines
    (leading whitespace is important):
steps:
- bash: npx docker4gis project-template
  env:
    PAT: $(PAT)
    DOCKER_PASSWORD: $(DOCKER_PASSWORD)

    5.4. Now run the pipeline:
    - Click Save and run (top right) | Save and run (bottom right).
    - Click on the Job to watch the progress.

On completion, the pipeline deletes the project's default repository (keeping
the new repositories created by the pipeline), and also deletes the pipeline
itself (including the variables created above).

When the log ends with "##[error]The build was canceled", that's allright; it's
a side effect of the pipeline deleting itself after it "built" the project.

The result should be several repositories (one "^package", and a number of
components), each with a branch policy set on the "main" branch, and each with a
Build Validation pipeline (which runs automatically on each new or modified Pull
Request, and wich has to succeed before the PR can be Completed), and a
Continuous Integration pipeline, which runs automatically on each PR
merge/completion. The "main" branches don't allow direct commits, only PR
merges.

Remove any repositories from the project that you won't be using. Also, rename
some - specifically rename one to "app", and one to "api", so that those
containers will be found by the "proxy" component automatically.

Lastly, a "TEST" Environment is created, along with a template "TEST" Service
Connection. Edit the Service connection details, before uncommenting the Deploy
Job in the Continuous Integration pipeline created in the ^package repo.
