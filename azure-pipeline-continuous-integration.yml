trigger:
# NOTE: "npm-package" -> "master" after merge
- npm-package

pr:
- none

steps:
# Allow the pipeline to push directly to the protected branch, by explicitly
# setting an admin user account, and a Personal Access Token as the password.
# The token value is stored in our LastPass.
- bash: |
    git remote set-url origin https://merkatorgis:$(GITHUB_PASSWORD)@github.com/merkatorgis/docker4gis.git
  displayName: 'git login'

# Login to the Docker Hub, so that we can push the image we'll build.
- bash: |
    echo '$(DOCKER_PASSWORD)' | docker login -u=docker4gis --password-stdin docker.io
  displayName: 'docker login'

# Test the authorisation for NPM, so that we know we can publish the package
# we're updating. Using the environment variable placeholder in .npmrc; see
# https://docs.npmjs.com/using-private-packages-in-a-ci-cd-workflow#create-and-check-in-a-project-specific-npmrc-file.
- bash: |
    npm whoami
  displayName: 'npm login'
  env:
    NPM_TOKEN: '$(NPM_TOKEN)'

# Configure git with the pipeline's details.
- bash: |
    git config --global user.email 'pipeline@azure.com'
    git config --global user.name 'Azure Pipeline'
  displayName: 'git config'

# Prepare the git repo to accept commits.
# NOTE: "npm-package" -> "master" (2x) after merge
- bash: |
    git checkout -b azure-pipelines
    git push --set-upstream origin azure-pipelines
  displayName: 'git undo detached state'


# Use npm to increment our version; see
# https://docs.npmjs.com/cli/v9/commands/npm-version. Npm assumes semantic
# versioning; we don't actually do that - instead, we just keep incrementing the
# PATCH version (see https://semver.org). With git-tag-version set to false,
# apparently npm version not only skips the tag, but also the commit.
- bash: |
    npm config set git-tag-version false
    version=$(npm version patch)
    git add .
    cd base/package
    ../upgrade_templates.sh "$version"
    git add .
    message="$version [skip ci]"
    git commit -m "$message"
    git tag -a "$version" -f -m "$message"
  displayName: 'bump version'

# Build the new package image using the bumped docker4gis.
- bash: |
    cd base/package
    export DOCKER_BASE=..
    ./build.sh
  displayName: 'build package image'

# Push the just built package image to the Docker Hub. 
- bash: |
    set -x
    version=$(./docker4gis version pipeline)
    image=docker4gis/package
    latest=$image:latest
    image=$image:v$version
    docker image tag "$latest" "$image"
    docker image push "$image"
  displayName: 'push package image'

# Publish the npm package.
- bash: |
    npm publish
  displayName: 'npm publish'
  env:
    NPM_TOKEN: '$(NPM_TOKEN)'

# Now that everything succeeded, push npm version's and our own changes back to
# the original repo.
- bash: |
    git push
    git push --tags
  displayName: 'git push version'
