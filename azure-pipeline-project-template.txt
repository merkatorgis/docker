Note: to provision the project with all the needed repositories, code, policies,
pipelines, etc, the pipeline needs to run (twice) with the credentials of a
project administrator.

1. Create a new DevOps project.

2. Initialise the new project's default repo:
- Click Repos (center left).
- Click Initialize (bottom right).

3. Create a Personal Access Token (PAT):
- As an Administrator of this DevOps Project, create a PAT with scope "full
access". See for instructions:
https://learn.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?toc=%2Fazure%2Fdevops%2Forganizations%2Ftoc.json&view=azure-devops&tabs=Windows

4. Create a new pipeline:
- Click Pipelines (center left) | Create pipeline | Azure Repos Git |
    {this project's default repo} | Starter pipeline

5. Store the PAT in a pipeline variable:
- Click Variables (top right) | New variable
    -> Name: PAT, Value: {the PAT you created}, DON'T Keep this value secret
- Clik OK | Save to save the new variable.

6. Edit (or replace) the pipeline code, to exactly this:

steps:
- script: npx docker4gis project-template

7. Save and Run the pipeline:
- Click Save and run (top right), and Save and run (bottom right) again, to run
the pipeline.
- Click on the Job to see when it's done.
The pipeline replaces itself with the code that actually provisions the template
content.

8. Run the (replaced) pipeline once more:
- Click the Back button (‚Üê) to get from the Job back to the "build".
- Click Run new (top right), and Run (bottom right), to rerun the pipeline.
- Click on the "Provision docker4gis template" job to see what's happening.

On completion, the pipeline deletes the project's default repository (keeping
the new repositories created by the pipeline), and also deletes the pipeline
itself, including the PAT variable and its value. When the log in the end says
"##[error]The build was canceled", that's allright; it's because of the pipeline
deletion.

The result should be several repositories (one "^package", and a number of
components), each with a branch policy set on the "main" branch, and each with a
Build Validation pipeline (which runs automatically on each new or modified Pull
Request, and wich has to succeed before the PR can be Completed), and a
Continuous Integration pipeline, which runs automatically on each PR
merge/completion. The "main" branch doesn't allow direct commits, only PR
merges.

Remove any repositories from the project that you won't be using. Also, rename
some, specifically rename one to "app", and one to "api", so that they will be
picked op by the "proxy" component automatically.

Lastly, a "TEST" Environment is created, along with a template "TEST" Service
Connection. Edit the Service connection details, before uncommenting the Deploy
Job in the ^package's Continuous Integration pipeline.
